'use client';

import { useEffect, useState } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { usePathname } from 'next/navigation';
import { motion, AnimatePresence } from 'framer-motion';
import { contactInfo, socialLinks } from '@/data';

const Navbar = () => {
  const [isScrolled, setIsScrolled] = useState(false);
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const pathname = usePathname();

  // Handle body scroll lock
  useEffect(() => {
    if (isMenuOpen) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = 'unset';
    }
    return () => {
      document.body.style.overflow = 'unset';
    };
  }, [isMenuOpen]);

  const navItems = [
    { name: 'Home', href: '/' },
    { name: 'About', href: '#about' },
    { name: 'Events', href: '#events' },
    { name: 'Team', href: '#team' },
    { name: 'Gallery', href: '#gallery' },
    { name: 'Projects', href: '#projects' },
    { name: 'Contact', href: '#contact' },
  ];

  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 50);
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  return (
    <motion.nav
      initial={{ y: -100 }}
      animate={{ y: 0 }}
      className={`fixed w-full z-[100] transition-all duration-300 ${
        isScrolled
          ? 'bg-black/90 backdrop-blur-sm py-4'
          : 'bg-transparent py-6'
      }`}
    >
      <div className="container mx-auto px-4">
        <div className="flex items-center justify-between">
          <Link href="/" className="relative w-48 h-16">
            <Image
              src="/images/avyantrix.png"
              alt="Avyantrix"
              fill
              className="object-contain"
              priority
            />
          </Link>

          <div className="hidden md:flex space-x-8">
            {navItems.map((item) => (
              <Link
                key={item.name}
                href={item.href}
                className={`text-white hover:text-accent transition-colors ${
                  pathname === item.href ? 'text-accent' : ''
                }`}
              >
                {item.name}
              </Link>
            ))}
          </div>

          <button 
            onClick={() => setIsMenuOpen(!isMenuOpen)}
            className="md:hidden text-white p-2 z-[110] relative"
          >
            <motion.svg
              className="w-6 h-6"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              animate={isMenuOpen ? "open" : "closed"}
              variants={{
                open: { rotate: 45 },
                closed: { rotate: 0 }
              }}
            >
              <motion.path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                variants={{
                  open: { d: "M18 6L6 18" },
                  closed: { d: "M4 6h16" }
                }}
              />
              <motion.path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                variants={{
                  open: { opacity: 0 },
                  closed: { opacity: 1 }
                }}
                d="M4 12h16"
              />
              <motion.path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                variants={{
                  open: { d: "M6 6l12 12" },
                  closed: { d: "M4 18h16" }
                }}
              />
            </motion.svg>
          </button>
        </div>
      </div>

      {/* Mobile Menu Overlay */}
      <AnimatePresence mode="wait">
        {isMenuOpen && (
          <div className="fixed inset-0 md:hidden z-[90] isolate">
            {/* Background overlay */}
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.2 }}
              className="absolute inset-0 bg-black/70 backdrop-blur-md"
              onClick={() => setIsMenuOpen(false)}
            />
            
            {/* Center container */}
            <div className="absolute inset-0 flex items-center justify-center pointer-events-none">
              {/* Menu content */}
              <motion.div
                initial={{ scale: 0.95, opacity: 0 }}
                animate={{ scale: 1, opacity: 1 }}
                exit={{ scale: 0.95, opacity: 0 }}
                transition={{ 
                  type: "spring",
                  damping: 30,
                  stiffness: 300
                }}
                className="w-[90%] max-w-sm bg-white/10 backdrop-blur-2xl border border-white/20 rounded-2xl z-[95] p-6 shadow-2xl pointer-events-auto"
                onClick={(e) => e.stopPropagation()}
              >
                <div className="w-full space-y-2">
                  {navItems.map((item, index) => (
                    <motion.div
                      key={item.name}
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: 10 }}
                      transition={{ 
                        delay: index * 0.05,
                        type: "spring",
                        stiffness: 120,
                        damping: 20
                      }}
                    >
                      <Link
                        href={item.href}
                        onClick={() => {
                          setIsMenuOpen(false);
                          if (item.href.startsWith('#')) {
                            const element = document.querySelector(item.href);
                            element?.scrollIntoView({ behavior: 'smooth' });
                          }
                        }}
                        className={`block w-full px-6 py-3 rounded-xl text-lg font-medium text-center transition-all duration-200 
                          backdrop-blur-sm border border-white/10 hover:scale-105 transform
                          ${pathname === item.href 
                            ? 'bg-accent/20 text-accent border-accent/50 shadow-lg shadow-accent/20' 
                            : 'text-white hover:bg-white/10 hover:text-accent hover:border-white/20'
                          }`}
                      >
                        {item.name}
                      </Link>
                    </motion.div>
                  ))}
                </div>
              </motion.div>
            </div>
          </div>
        )}
      </AnimatePresence>
    </motion.nav>
  );
};

export default Navbar;
